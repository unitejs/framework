"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base class for exceptions.
 */
const objectHelper_1 = require("../helpers/objectHelper");
class ExceptionBase {
    constructor(context, reference, message, parameters, data) {
        this.context = objectHelper_1.ObjectHelper.getClassName(context);
        this.reference = reference;
        this.message = message;
        this.parameters = parameters;
        if (data instanceof ExceptionBase) {
            this.innerException = data;
        }
        else {
            this.data = data;
        }
        let stack = "";
        if (this.data && this.data.stack) {
            stack = this.data.stack;
        }
        else {
            stack = new Error("").stack;
        }
        if (stack) {
            this.stackTrace = stack.split("\n");
            if (stack.length > 3) {
                this.stackTrace = this.stackTrace.slice(3);
            }
        }
    }
    static exceptionToStringInternal(baseException) {
        const parts = [];
        if (baseException.context && baseException.reference) {
            parts.push(`${objectHelper_1.ObjectHelper.getClassName(baseException.context)}::${baseException.reference}`);
        }
        if (baseException.message) {
            parts.push(ExceptionBase.substituteParameters(baseException.message, baseException.parameters));
        }
        if (baseException.data) {
            if (baseException.data.message) {
                parts.push(baseException.data.message);
            }
            else {
                parts.push(JSON.stringify(baseException.data));
            }
        }
        if (baseException.stackTrace) {
            baseException.stackTrace.forEach(st => {
                parts.push(st);
            });
        }
        if (baseException.innerException) {
            parts.push("-----------------------------------------------------------------");
            parts.push(this.exceptionToStringInternal(baseException.innerException));
        }
        return parts.join("\r\n\r\n");
    }
    static substituteParameters(message, parameters) {
        return message && parameters ? message.replace(/{(\d+)}/g, (match, idx) => parameters[idx]) : message;
    }
    toString() {
        return ExceptionBase.exceptionToStringInternal(this);
    }
}
exports.ExceptionBase = ExceptionBase;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2V4Y2VwdGlvbkJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7R0FFRztBQUNILDBEQUF1RDtBQUV2RDtJQVVJLFlBQVksT0FBWSxFQUFFLFNBQWlCLEVBQUUsT0FBZSxFQUFFLFVBQWlCLEVBQUUsSUFBUztRQUN0RixJQUFJLENBQUMsT0FBTyxHQUFHLDJCQUFZLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQy9CLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLENBQUM7UUFFRCxJQUFJLEtBQUssR0FBdUIsRUFBRSxDQUFDO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQy9CLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2hDLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXBDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFTyxNQUFNLENBQUMseUJBQXlCLENBQUMsYUFBNEI7UUFDakUsTUFBTSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBRTNCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLDJCQUFZLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNsRyxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNwRyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDckIsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuRCxDQUFDO1FBQ0wsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNCLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQy9CLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO1lBQ2hGLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQzdFLENBQUM7UUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU8sTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQWUsRUFBRSxVQUFpQjtRQUNsRSxNQUFNLENBQUMsT0FBTyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0lBQzFHLENBQUM7SUFFTSxRQUFRO1FBQ1gsTUFBTSxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0o7QUE3RUQsc0NBNkVDIiwiZmlsZSI6ImhlbHBlcnMvZXhjZXB0aW9uQmFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzZSBjbGFzcyBmb3IgZXhjZXB0aW9ucy5cbiAqL1xuaW1wb3J0IHsgT2JqZWN0SGVscGVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvb2JqZWN0SGVscGVyXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFeGNlcHRpb25CYXNlIHtcbiAgICBwdWJsaWMgY29udGV4dDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWZlcmVuY2U6IHN0cmluZztcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nO1xuICAgIHB1YmxpYyBwYXJhbWV0ZXJzOiBhbnlbXTtcbiAgICBwdWJsaWMgZGF0YTogYW55O1xuICAgIHB1YmxpYyBzdGFja1RyYWNlOiBzdHJpbmdbXTtcblxuICAgIHB1YmxpYyBpbm5lckV4Y2VwdGlvbjogRXhjZXB0aW9uQmFzZTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IGFueSwgcmVmZXJlbmNlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgcGFyYW1ldGVyczogYW55W10sIGRhdGE6IGFueSkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKGNvbnRleHQpO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gcGFyYW1ldGVycztcblxuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEV4Y2VwdGlvbkJhc2UpIHtcbiAgICAgICAgICAgIHRoaXMuaW5uZXJFeGNlcHRpb24gPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGFjazogc3RyaW5nIHwgdW5kZWZpbmVkID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEuc3RhY2spIHtcbiAgICAgICAgICAgIHN0YWNrID0gdGhpcy5kYXRhLnN0YWNrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2sgPSBuZXcgRXJyb3IoXCJcIikuc3RhY2s7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuXG4gICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2tUcmFjZSA9IHRoaXMuc3RhY2tUcmFjZS5zbGljZSgzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGV4Y2VwdGlvblRvU3RyaW5nSW50ZXJuYWwoYmFzZUV4Y2VwdGlvbjogRXhjZXB0aW9uQmFzZSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGlmIChiYXNlRXhjZXB0aW9uLmNvbnRleHQgJiYgYmFzZUV4Y2VwdGlvbi5yZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goYCR7T2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShiYXNlRXhjZXB0aW9uLmNvbnRleHQpfTo6JHtiYXNlRXhjZXB0aW9uLnJlZmVyZW5jZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZUV4Y2VwdGlvbi5tZXNzYWdlKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKEV4Y2VwdGlvbkJhc2Uuc3Vic3RpdHV0ZVBhcmFtZXRlcnMoYmFzZUV4Y2VwdGlvbi5tZXNzYWdlLCBiYXNlRXhjZXB0aW9uLnBhcmFtZXRlcnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYXNlRXhjZXB0aW9uLmRhdGEpIHtcbiAgICAgICAgICAgIGlmIChiYXNlRXhjZXB0aW9uLmRhdGEubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goYmFzZUV4Y2VwdGlvbi5kYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKEpTT04uc3RyaW5naWZ5KGJhc2VFeGNlcHRpb24uZGF0YSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJhc2VFeGNlcHRpb24uc3RhY2tUcmFjZSkge1xuICAgICAgICAgICAgYmFzZUV4Y2VwdGlvbi5zdGFja1RyYWNlLmZvckVhY2goc3QgPT4ge1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goc3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmFzZUV4Y2VwdGlvbi5pbm5lckV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcGFydHMucHVzaChcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuICAgICAgICAgICAgcGFydHMucHVzaCh0aGlzLmV4Y2VwdGlvblRvU3RyaW5nSW50ZXJuYWwoYmFzZUV4Y2VwdGlvbi5pbm5lckV4Y2VwdGlvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcXHJcXG5cXHJcXG5cIik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgc3Vic3RpdHV0ZVBhcmFtZXRlcnMobWVzc2FnZTogc3RyaW5nLCBwYXJhbWV0ZXJzOiBhbnlbXSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlICYmIHBhcmFtZXRlcnMgPyBtZXNzYWdlLnJlcGxhY2UoL3soXFxkKyl9L2csIChtYXRjaCwgaWR4KSA9PiBwYXJhbWV0ZXJzW2lkeF0pIDogbWVzc2FnZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEV4Y2VwdGlvbkJhc2UuZXhjZXB0aW9uVG9TdHJpbmdJbnRlcm5hbCh0aGlzKTtcbiAgICB9XG59XG4iXX0=
