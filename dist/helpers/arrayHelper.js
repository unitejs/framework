"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Array helper methods
 */
const objectHelper_1 = require("./objectHelper");
class ArrayHelper {
    static addRemove(arr, object, add, matcher) {
        if (arr !== undefined && arr !== null && object !== undefined && object !== null) {
            const idx = matcher ? arr.findIndex(item => matcher(object, item)) : arr.indexOf(object);
            if (add) {
                if (idx < 0) {
                    arr.push(object);
                }
            }
            else {
                if (idx >= 0) {
                    arr.splice(idx, 1);
                }
            }
        }
    }
    static merge(obj1, obj2) {
        if (obj1 === undefined || obj1 === null) {
            return obj2;
        }
        else if (obj2 === undefined || obj2 === null) {
            return obj1;
        }
        else {
            // If anything in the array is an object then merge by index
            if (obj2.filter(item => typeof item === "object").length > 0) {
                const newArray = [];
                for (let i = 0; i < Math.max(obj1.length, obj2.length); i++) {
                    const o1 = i < obj1.length ? obj1[i] : undefined;
                    const o2 = i < obj2.length ? obj2[i] : undefined;
                    newArray.push(objectHelper_1.ObjectHelper.merge(o1, o2));
                }
                return newArray;
            }
            else {
                obj2.forEach((item) => {
                    const idx = obj1.indexOf(item);
                    if (idx < 0) {
                        obj1.push(item);
                    }
                });
            }
            return obj1;
        }
    }
}
exports.ArrayHelper = ArrayHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2FycmF5SGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxpREFBOEM7QUFFOUM7SUFDVyxNQUFNLENBQUMsU0FBUyxDQUFJLEdBQVEsRUFBRSxNQUFTLEVBQUUsR0FBWSxFQUFFLE9BQXlDO1FBQ25HLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQy9FLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6RixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3JCLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQVcsRUFBRSxJQUFXO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSiw0REFBNEQ7WUFDNUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUMxRCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ2pELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDakQsUUFBUSxDQUFDLElBQUksQ0FBQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUMsQ0FBQztnQkFDRCxNQUFNLENBQUMsUUFBUSxDQUFDO1lBRXBCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7b0JBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQy9CLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3BCLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO0lBQ0wsQ0FBQztDQUNKO0FBNUNELGtDQTRDQyIsImZpbGUiOiJoZWxwZXJzL2FycmF5SGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcnJheSBoZWxwZXIgbWV0aG9kc1xuICovXG5pbXBvcnQgeyBPYmplY3RIZWxwZXIgfSBmcm9tIFwiLi9vYmplY3RIZWxwZXJcIjtcblxuZXhwb3J0IGNsYXNzIEFycmF5SGVscGVyIHtcbiAgICBwdWJsaWMgc3RhdGljIGFkZFJlbW92ZTxUPihhcnI6IFRbXSwgb2JqZWN0OiBULCBhZGQ6IGJvb2xlYW4sIG1hdGNoZXI/OiAob2JqZWN0OiBULCBpdGVtOiBUKSA9PiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChhcnIgIT09IHVuZGVmaW5lZCAmJiBhcnIgIT09IG51bGwgJiYgb2JqZWN0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBtYXRjaGVyID8gYXJyLmZpbmRJbmRleChpdGVtID0+IG1hdGNoZXIob2JqZWN0LCBpdGVtKSkgOiBhcnIuaW5kZXhPZihvYmplY3QpO1xuICAgICAgICAgICAgaWYgKGFkZCkge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbWVyZ2Uob2JqMTogYW55W10sIG9iajI6IGFueVtdKSA6IGFueVtdIHtcbiAgICAgICAgaWYgKG9iajEgPT09IHVuZGVmaW5lZCB8fCBvYmoxID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqMjtcbiAgICAgICAgfSBlbHNlIGlmIChvYmoyID09PSB1bmRlZmluZWQgfHwgb2JqMiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iajE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBhbnl0aGluZyBpbiB0aGUgYXJyYXkgaXMgYW4gb2JqZWN0IHRoZW4gbWVyZ2UgYnkgaW5kZXhcbiAgICAgICAgICAgIGlmIChvYmoyLmZpbHRlcihpdGVtID0+IHR5cGVvZiBpdGVtID09PSBcIm9iamVjdFwiKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWF4KG9iajEubGVuZ3RoLCBvYmoyLmxlbmd0aCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvMSA9IGkgPCBvYmoxLmxlbmd0aCA/IG9iajFbaV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8yID0gaSA8IG9iajIubGVuZ3RoID8gb2JqMltpXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgbmV3QXJyYXkucHVzaChPYmplY3RIZWxwZXIubWVyZ2UobzEsIG8yKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdBcnJheTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvYmoyLmZvckVhY2goKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZHggPSBvYmoxLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoxLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9iajE7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
