"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Array helper methods
 */
const objectHelper_1 = require("./objectHelper");
class ArrayHelper {
    static addRemove(arr, key, add) {
        if (arr !== undefined && arr !== null && key !== undefined && key !== null) {
            const idx = arr.indexOf(key);
            if (add) {
                if (idx < 0) {
                    arr.push(key);
                }
            }
            else {
                if (idx >= 0) {
                    arr.splice(idx, 1);
                }
            }
        }
    }
    static merge(obj1, obj2) {
        if (obj1 === undefined || obj1 === null) {
            return obj2;
        }
        else if (obj2 === undefined || obj2 === null) {
            return obj1;
        }
        else {
            // If anything in the array is an object then merge by index
            if (obj2.filter(item => typeof item === "object").length > 0) {
                const newArray = [];
                for (let i = 0; i < Math.max(obj1.length, obj2.length); i++) {
                    const o1 = i < obj1.length ? obj1[i] : undefined;
                    const o2 = i < obj2.length ? obj2[i] : undefined;
                    newArray.push(objectHelper_1.ObjectHelper.merge(o1, o2));
                }
                return newArray;
            }
            else {
                obj2.forEach((item) => {
                    const idx = obj1.indexOf(item);
                    if (idx < 0) {
                        obj1.push(item);
                    }
                });
            }
            return obj1;
        }
    }
}
exports.ArrayHelper = ArrayHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2FycmF5SGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxpREFBOEM7QUFFOUM7SUFDVyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQVUsRUFBRSxHQUFRLEVBQUUsR0FBWTtRQUN0RCxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6RSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEIsQ0FBQztZQUNMLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkIsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBVyxFQUFFLElBQVc7UUFDeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLDREQUE0RDtZQUM1RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0QsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO2dCQUNwQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDMUQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztvQkFDakQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztvQkFDakQsUUFBUSxDQUFDLElBQUksQ0FBQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDOUMsQ0FBQztnQkFDRCxNQUFNLENBQUMsUUFBUSxDQUFDO1lBRXBCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUztvQkFDbkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDL0IsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDcEIsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hCLENBQUM7SUFDTCxDQUFDO0NBQ0o7QUE1Q0Qsa0NBNENDIiwiZmlsZSI6ImhlbHBlcnMvYXJyYXlIZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFycmF5IGhlbHBlciBtZXRob2RzXG4gKi9cbmltcG9ydCB7IE9iamVjdEhlbHBlciB9IGZyb20gXCIuL29iamVjdEhlbHBlclwiO1xuXG5leHBvcnQgY2xhc3MgQXJyYXlIZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgYWRkUmVtb3ZlKGFycjogYW55W10sIGtleTogYW55LCBhZGQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGFyciAhPT0gdW5kZWZpbmVkICYmIGFyciAhPT0gbnVsbCAmJiBrZXkgIT09IHVuZGVmaW5lZCAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IGFyci5pbmRleE9mKGtleSk7XG4gICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtZXJnZShvYmoxOiBhbnlbXSwgb2JqMjogYW55W10pIDogYW55W10ge1xuICAgICAgICBpZiAob2JqMSA9PT0gdW5kZWZpbmVkIHx8IG9iajEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoyO1xuICAgICAgICB9IGVsc2UgaWYgKG9iajIgPT09IHVuZGVmaW5lZCB8fCBvYmoyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIGFueXRoaW5nIGluIHRoZSBhcnJheSBpcyBhbiBvYmplY3QgdGhlbiBtZXJnZSBieSBpbmRleFxuICAgICAgICAgICAgaWYgKG9iajIuZmlsdGVyKGl0ZW0gPT4gdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5tYXgob2JqMS5sZW5ndGgsIG9iajIubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8xID0gaSA8IG9iajEubGVuZ3RoID8gb2JqMVtpXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbzIgPSBpIDwgb2JqMi5sZW5ndGggPyBvYmoyW2ldIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBuZXdBcnJheS5wdXNoKE9iamVjdEhlbHBlci5tZXJnZShvMSwgbzIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iajIuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IG9iajEuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iajEucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqMTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
