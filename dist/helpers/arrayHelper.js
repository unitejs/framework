"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Array helper methods
 */
const objectHelper_1 = require("./objectHelper");
class ArrayHelper {
    static addRemove(arr, object, add, matcher) {
        if (arr !== undefined && arr !== null && object !== undefined && object !== null) {
            const idx = matcher ? arr.findIndex(item => matcher(object, item)) : arr.indexOf(object);
            if (add) {
                if (idx < 0) {
                    arr.push(object);
                }
            }
            else {
                if (idx >= 0) {
                    arr.splice(idx, 1);
                }
            }
        }
    }
    static merge(obj1, obj2) {
        if (obj1 === undefined || obj1 === null) {
            return obj2;
        }
        else if (obj2 === undefined || obj2 === null) {
            return obj1;
        }
        else {
            // If anything in the array is an object then merge by index
            if (obj2.filter(item => typeof item === "object").length > 0) {
                const newArray = [];
                for (let i = 0; i < Math.max(obj1.length, obj2.length); i++) {
                    const o1 = i < obj1.length ? obj1[i] : undefined;
                    const o2 = i < obj2.length ? obj2[i] : undefined;
                    newArray.push(objectHelper_1.ObjectHelper.merge(o1, o2));
                }
                return newArray;
            }
            else {
                obj2.forEach((item) => {
                    const idx = obj1.indexOf(item);
                    if (idx < 0) {
                        obj1.push(item);
                    }
                });
            }
            return obj1;
        }
    }
}
exports.ArrayHelper = ArrayHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2FycmF5SGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxpREFBOEM7QUFFOUMsTUFBYSxXQUFXO0lBQ2IsTUFBTSxDQUFDLFNBQVMsQ0FBSSxHQUFRLEVBQUUsTUFBUyxFQUFFLEdBQVksRUFBRSxPQUF5QztRQUNuRyxJQUFJLEdBQUcsS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDOUUsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pGLElBQUksR0FBRyxFQUFFO2dCQUNMLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtvQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNwQjthQUNKO2lCQUFNO2dCQUNILElBQUksR0FBRyxJQUFJLENBQUMsRUFBRTtvQkFDVixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDdEI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBVyxFQUFFLElBQVc7UUFDeEMsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDZjthQUFNLElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQzVDLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7YUFBTTtZQUNILDREQUE0RDtZQUM1RCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMxRCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN6RCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ2pELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDakQsUUFBUSxDQUFDLElBQUksQ0FBQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDN0M7Z0JBQ0QsT0FBTyxRQUFRLENBQUM7YUFFbkI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO29CQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUMvQixJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7d0JBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFDbkI7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7YUFDTjtZQUVELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0NBQ0o7QUE1Q0Qsa0NBNENDIiwiZmlsZSI6ImhlbHBlcnMvYXJyYXlIZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFycmF5IGhlbHBlciBtZXRob2RzXG4gKi9cbmltcG9ydCB7IE9iamVjdEhlbHBlciB9IGZyb20gXCIuL29iamVjdEhlbHBlclwiO1xuXG5leHBvcnQgY2xhc3MgQXJyYXlIZWxwZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgYWRkUmVtb3ZlPFQ+KGFycjogVFtdLCBvYmplY3Q6IFQsIGFkZDogYm9vbGVhbiwgbWF0Y2hlcj86IChvYmplY3Q6IFQsIGl0ZW06IFQpID0+IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGFyciAhPT0gdW5kZWZpbmVkICYmIGFyciAhPT0gbnVsbCAmJiBvYmplY3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IG1hdGNoZXIgPyBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbWF0Y2hlcihvYmplY3QsIGl0ZW0pKSA6IGFyci5pbmRleE9mKG9iamVjdCk7XG4gICAgICAgICAgICBpZiAoYWRkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2gob2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtZXJnZShvYmoxOiBhbnlbXSwgb2JqMjogYW55W10pIDogYW55W10ge1xuICAgICAgICBpZiAob2JqMSA9PT0gdW5kZWZpbmVkIHx8IG9iajEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoyO1xuICAgICAgICB9IGVsc2UgaWYgKG9iajIgPT09IHVuZGVmaW5lZCB8fCBvYmoyID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIElmIGFueXRoaW5nIGluIHRoZSBhcnJheSBpcyBhbiBvYmplY3QgdGhlbiBtZXJnZSBieSBpbmRleFxuICAgICAgICAgICAgaWYgKG9iajIuZmlsdGVyKGl0ZW0gPT4gdHlwZW9mIGl0ZW0gPT09IFwib2JqZWN0XCIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5tYXgob2JqMS5sZW5ndGgsIG9iajIubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8xID0gaSA8IG9iajEubGVuZ3RoID8gb2JqMVtpXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbzIgPSBpIDwgb2JqMi5sZW5ndGggPyBvYmoyW2ldIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBuZXdBcnJheS5wdXNoKE9iamVjdEhlbHBlci5tZXJnZShvMSwgbzIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9iajIuZm9yRWFjaCgoaXRlbTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IG9iajEuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iajEucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqMTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
