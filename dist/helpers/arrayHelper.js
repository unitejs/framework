"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Array helper methods
 */
const objectHelper_1 = require("./objectHelper");
class ArrayHelper {
    static addRemove(arr, object, add, matcher) {
        if (arr !== undefined && arr !== null && object !== undefined && object !== null) {
            const idx = matcher ? arr.findIndex(item => matcher(object, item)) : arr.indexOf(object);
            if (add) {
                if (idx < 0) {
                    arr.push(object);
                }
            }
            else {
                if (idx >= 0) {
                    arr.splice(idx, 1);
                }
            }
        }
    }
    static merge(obj1, obj2) {
        if (obj1 === undefined || obj1 === null) {
            return obj2;
        }
        else if (obj2 === undefined || obj2 === null) {
            return obj1;
        }
        else {
            // If anything in the array is an object then merge by index
            if (obj2.filter(item => typeof item === "object").length > 0) {
                const newArray = [];
                for (let i = 0; i < Math.max(obj1.length, obj2.length); i++) {
                    const o1 = i < obj1.length ? obj1[i] : undefined;
                    const o2 = i < obj2.length ? obj2[i] : undefined;
                    newArray.push(objectHelper_1.ObjectHelper.merge(o1, o2));
                }
                return newArray;
            }
            else {
                obj2.forEach((item) => {
                    const idx = obj1.indexOf(item);
                    if (idx < 0) {
                        obj1.push(item);
                    }
                });
            }
            return obj1;
        }
    }
}
exports.ArrayHelper = ArrayHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL2FycmF5SGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCxpREFBOEM7QUFFOUM7SUFDVyxNQUFNLENBQUMsU0FBUyxDQUFJLEdBQVEsRUFBRSxNQUFTLEVBQUUsR0FBWSxFQUFFLE9BQXlDO1FBQ25HLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtZQUM5RSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekYsSUFBSSxHQUFHLEVBQUU7Z0JBQ0wsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO29CQUNULEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3BCO2FBQ0o7aUJBQU07Z0JBQ0gsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO29CQUNWLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUN0QjthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFXLEVBQUUsSUFBVztRQUN4QyxJQUFJLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQztTQUNmO2FBQU0sSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDNUMsT0FBTyxJQUFJLENBQUM7U0FDZjthQUFNO1lBQ0gsNERBQTREO1lBQzVELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzFELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztnQkFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3pELE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztvQkFDakQsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO29CQUNqRCxRQUFRLENBQUMsSUFBSSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztnQkFDRCxPQUFPLFFBQVEsQ0FBQzthQUVuQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7b0JBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQy9CLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTt3QkFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNuQjtnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNOO1lBRUQsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7Q0FDSjtBQTVDRCxrQ0E0Q0MiLCJmaWxlIjoiaGVscGVycy9hcnJheUhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQXJyYXkgaGVscGVyIG1ldGhvZHNcbiAqL1xuaW1wb3J0IHsgT2JqZWN0SGVscGVyIH0gZnJvbSBcIi4vb2JqZWN0SGVscGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBBcnJheUhlbHBlciB7XG4gICAgcHVibGljIHN0YXRpYyBhZGRSZW1vdmU8VD4oYXJyOiBUW10sIG9iamVjdDogVCwgYWRkOiBib29sZWFuLCBtYXRjaGVyPzogKG9iamVjdDogVCwgaXRlbTogVCkgPT4gYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoYXJyICE9PSB1bmRlZmluZWQgJiYgYXJyICE9PSBudWxsICYmIG9iamVjdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gbWF0Y2hlciA/IGFyci5maW5kSW5kZXgoaXRlbSA9PiBtYXRjaGVyKG9iamVjdCwgaXRlbSkpIDogYXJyLmluZGV4T2Yob2JqZWN0KTtcbiAgICAgICAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG1lcmdlKG9iajE6IGFueVtdLCBvYmoyOiBhbnlbXSkgOiBhbnlbXSB7XG4gICAgICAgIGlmIChvYmoxID09PSB1bmRlZmluZWQgfHwgb2JqMSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG9iajI7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqMiA9PT0gdW5kZWZpbmVkIHx8IG9iajIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmoxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgYW55dGhpbmcgaW4gdGhlIGFycmF5IGlzIGFuIG9iamVjdCB0aGVuIG1lcmdlIGJ5IGluZGV4XG4gICAgICAgICAgICBpZiAob2JqMi5maWx0ZXIoaXRlbSA9PiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1heChvYmoxLmxlbmd0aCwgb2JqMi5sZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbzEgPSBpIDwgb2JqMS5sZW5ndGggPyBvYmoxW2ldIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvMiA9IGkgPCBvYmoyLmxlbmd0aCA/IG9iajJbaV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goT2JqZWN0SGVscGVyLm1lcmdlKG8xLCBvMikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3QXJyYXk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2JqMi5mb3JFYWNoKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWR4ID0gb2JqMS5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqMS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvYmoxO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
