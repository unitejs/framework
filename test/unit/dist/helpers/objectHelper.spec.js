"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ObjectHelper.
 */
const Chai = require("chai");
const objectHelper_1 = require("../../../../dist/helpers/objectHelper");
describe("ObjectHelper", () => {
    it("can be created", () => {
        const obj = new objectHelper_1.ObjectHelper();
        Chai.should().exist(obj);
    });
    describe("getClassName", () => {
        it("can return no object if the object is undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(undefined)).to.equal("<no object>");
        });
        it("can return no object if the object is null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(null)).to.equal("<no object>");
        });
        it("can return String if the object is an empty string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("")).to.equal("String");
        });
        it("can return String if the object is a value string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("hello")).to.equal("String");
        });
        it("can return Number if the object is a number", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(10)).to.equal("Number");
        });
        it("can return Boolean if the object is a true boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(true)).to.equal("Boolean");
        });
        it("can return Boolean if the object is a false boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(false)).to.equal("Boolean");
        });
        it("can return Date if the object is a Date", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new Date())).to.equal("Date");
        });
        it("can return ObjectHelper if the object is a ObjectHelper", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new objectHelper_1.ObjectHelper())).to.equal("ObjectHelper");
        });
        it("can return no object if the object is an empty function", () => {
            const emptyFunction = () => "hello";
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(emptyFunction)).to.equal("<no object>");
        });
    });
    describe("addRemove", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(null, null, null, true)).to.equal(undefined);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(undefined, undefined, null, true)).to.equal(undefined);
        });
        it("can fail when called with an array and no key", () => {
            const arr = [1, 2, 3];
            objectHelper_1.ObjectHelper.addRemove(arr, undefined, undefined, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can add the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can not add the item if already exists", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can remove the item if existing", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
        it("can not remove the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("sort", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(undefined)).to.equal(undefined);
        });
        it("can succeed when called with an already sorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an unsorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ b: "2", a: "1" })).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("merge", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(null, null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, undefined)).to.equal(undefined);
        });
        it("can fail when called with undefined left", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, { a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can fail when called with undefined right", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, undefined)).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an overwrite property", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, { b: "3", c: "4" })).to.deep.equal({ a: "1", b: "3", c: "4" });
        });
        it("can succeed when called with a undefined left sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: ["2", "3"] })).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a undefined right sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["2", "3"] }, {})).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["1", "2"] }, { a: ["2", "3"] })).to.deep.equal({ a: ["1", "2", "3"] });
        });
        it("can succeed when called with a complex sub array", () => {
            const obj1 = { a: [
                    { m: true, n: [1, 2] },
                    { m: true, n: [2, 3] }
                ] };
            const obj2 = { a: [
                    { m: true, n: [4, 5] }
                ] };
            Chai.expect(objectHelper_1.ObjectHelper.merge(obj1, obj2))
                .to.deep.equal({ a: [
                    { m: true, n: [1, 2, 4, 5] },
                    { m: true, n: [2, 3] }
                ] });
        });
        it("can succeed when called with top level arrays", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge([1, 2, 3], [3, 4, 5])).to.deep.equal([1, 2, 3, 4, 5]);
        });
        it("can succeed when called with a undefined left sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: { m: "2", n: "3" } })).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a undefined right sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, {})).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, { a: { n: "4", o: "5" } })).to.deep.equal({ a: { m: "2", n: "4", o: "5" } });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvaGVscGVycy9vYmplY3RIZWxwZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsNkJBQTZCO0FBQzdCLHVFQUFvRTtBQUVwRSxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLDJCQUFZLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUNyQixFQUFFLENBQUMsaURBQWlELEVBQUU7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUU7WUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFL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WUFDcEMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtZQUN6QyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDdkMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNsQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDdkMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFB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Q0FBQywyQ0FBMkMsRUFBRTtZQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckcsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RILENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlEQUF5RCxFQUFFO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1RixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxF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QUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0ksQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImhlbHBlcnMvb2JqZWN0SGVscGVyLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGZvciBPYmplY3RIZWxwZXIuXG4gKi9cbmltcG9ydCAqIGFzIENoYWkgZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IE9iamVjdEhlbHBlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9zcmMvaGVscGVycy9vYmplY3RIZWxwZXJcIjtcblxuZGVzY3JpYmUoXCJPYmplY3RIZWxwZXJcIiwgKCkgPT4ge1xuICAgIGl0KFwiY2FuIGJlIGNyZWF0ZWRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSBuZXcgT2JqZWN0SGVscGVyKCk7XG4gICAgICAgIENoYWkuc2hvdWxkKCkuZXhpc3Qob2JqKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiZ2V0Q2xhc3NOYW1lXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIG5vIG9iamVjdCBpZiB0aGUgb2JqZWN0IGlzIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKHVuZGVmaW5lZCkpLnRvLmVxdWFsKFwiPG5vIG9iamVjdD5cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBubyBvYmplY3QgaWYgdGhlIG9iamVjdCBpcyBudWxsXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUobnVsbCkpLnRvLmVxdWFsKFwiPG5vIG9iamVjdD5cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBTdHJpbmcgaWYgdGhlIG9iamVjdCBpcyBhbiBlbXB0eSBzdHJpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShcIlwiKSkudG8uZXF1YWwoXCJTdHJpbmdcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBTdHJpbmcgaWYgdGhlIG9iamVjdCBpcyBhIHZhbHVlIHN0cmluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKFwiaGVsbG9cIikpLnRvLmVxdWFsKFwiU3RyaW5nXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gTnVtYmVyIGlmIHRoZSBvYmplY3QgaXMgYSBudW1iZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZSgxMCkpLnRvLmVxdWFsKFwiTnVtYmVyXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gQm9vbGVhbiBpZiB0aGUgb2JqZWN0IGlzIGEgdHJ1ZSBib29sZWFuXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUodHJ1ZSkpLnRvLmVxdWFsKFwiQm9vbGVhblwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIEJvb2xlYW4gaWYgdGhlIG9iamVjdCBpcyBhIGZhbHNlIGJvb2xlYW5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShmYWxzZSkpLnRvLmVxdWFsKFwiQm9vbGVhblwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIERhdGUgaWYgdGhlIG9iamVjdCBpcyBhIERhdGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShuZXcgRGF0ZSgpKSkudG8uZXF1YWwoXCJEYXRlXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gT2JqZWN0SGVscGVyIGlmIHRoZSBvYmplY3QgaXMgYSBPYmplY3RIZWxwZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShuZXcgT2JqZWN0SGVscGVyKCkpKS50by5lcXVhbChcIk9iamVjdEhlbHBlclwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIG5vIG9iamVjdCBpZiB0aGUgb2JqZWN0IGlzIGFuIGVtcHR5IGZ1bmN0aW9uXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5RnVuY3Rpb24gPSAoKSA9PiBcImhlbGxvXCI7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKGVtcHR5RnVuY3Rpb24pKS50by5lcXVhbChcIjxubyBvYmplY3Q+XCIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwiYWRkUmVtb3ZlXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIG51bGxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmFkZFJlbW92ZShudWxsLCBudWxsLCBudWxsLCB0cnVlKSkudG8uZXF1YWwodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBudWxsLCB0cnVlKSkudG8uZXF1YWwodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFycmF5IGFuZCBubyBrZXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gWzEsIDIsIDNdO1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZShhcnIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbChbMSwgMiwgM10pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBhZGQgdGhlIGl0ZW0gaWYgbm90IGV4aXN0aW5nXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFycjogYW55ID0geyBhOiBcIjFcIiwgYjogXCIyXCIgfTtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUoYXJyLCBcImNcIiwgXCIzXCIsIHRydWUpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiMlwiLCBjOiBcIjNcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gbm90IGFkZCB0aGUgaXRlbSBpZiBhbHJlYWR5IGV4aXN0c1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSB7IGE6IFwiMVwiLCBiOiBcIjJcIiwgYzogXCIzXCIgfTtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUoYXJyLCBcImNcIiwgXCIzXCIsIHRydWUpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiMlwiLCBjOiBcIjNcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmVtb3ZlIHRoZSBpdGVtIGlmIGV4aXN0aW5nXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IHsgYTogXCIxXCIsIGI6IFwiMlwiLCBjOiBcIjNcIiB9O1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZShhcnIsIFwiY1wiLCBcIjNcIiwgZmFsc2UpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiMlwiIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBub3QgcmVtb3ZlIHRoZSBpdGVtIGlmIG5vdCBleGlzdGluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnI6IGFueSA9IHsgYTogXCIxXCIsIGI6IFwiMlwiIH07XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGFyciwgXCJjXCIsIFwiM1wiLCBmYWxzZSk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChhcnIpLnRvLmRlZXAuZXF1YWwoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJzb3J0XCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIG51bGxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLnNvcnQobnVsbCkpLnRvLmVxdWFsKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBmYWlsIHdoZW4gY2FsbGVkIHdpdGggdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5zb3J0KHVuZGVmaW5lZCkpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhbiBhbHJlYWR5IHNvcnRlZCBhcnJheVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuc29ydCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGFuIHVuc29ydGVkIGFycmF5XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5zb3J0KHsgYjogXCIyXCIsIGE6IFwiMVwiIH0pKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiMlwiIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwibWVyZ2VcIiwgKCkgPT4ge1xuICAgICAgICBpdChcImNhbiBmYWlsIHdoZW4gY2FsbGVkIHdpdGggbnVsbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UobnVsbCwgbnVsbCkpLnRvLmVxdWFsKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBmYWlsIHdoZW4gY2FsbGVkIHdpdGggdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZSh1bmRlZmluZWQsIHVuZGVmaW5lZCkpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCB1bmRlZmluZWQgbGVmdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UodW5kZWZpbmVkLCB7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIHVuZGVmaW5lZCByaWdodFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSwgdW5kZWZpbmVkKSkudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGFuIG92ZXJ3cml0ZSBwcm9wZXJ0eVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSwgeyBiOiBcIjNcIiwgYzogXCI0XCIgfSkpLnRvLmRlZXAuZXF1YWwoeyBhOiBcIjFcIiwgYjogXCIzXCIsIGM6IFwiNFwiIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYSB1bmRlZmluZWQgbGVmdCBzdWIgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHt9LCB7IGE6IFtcIjJcIiwgXCIzXCJdIH0pKS50by5kZWVwLmVxdWFsKHsgYTogW1wiMlwiLCBcIjNcIl0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhIHVuZGVmaW5lZCByaWdodCBzdWIgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHsgYTogW1wiMlwiLCBcIjNcIl0gfSwge30pKS50by5kZWVwLmVxdWFsKHsgYTogW1wiMlwiLCBcIjNcIl0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhIHN1YiBhcnJheVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoeyBhOiBbXCIxXCIsIFwiMlwiXSB9LCB7IGE6IFtcIjJcIiwgXCIzXCJdIH0pKS50by5kZWVwLmVxdWFsKHsgYTogW1wiMVwiLCBcIjJcIiwgXCIzXCJdIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYSBjb21wbGV4IHN1YiBhcnJheVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmoxID0geyBhOiBbXG4gICAgICAgICAgICAgICAgeyBtOiB0cnVlLCBuOiBbMSwgMl0gfSxcbiAgICAgICAgICAgICAgICB7IG06IHRydWUsIG46IFsyLCAzXSB9XG4gICAgICAgICAgICBdfTtcbiAgICAgICAgICAgIGNvbnN0IG9iajIgPSB7IGE6IFtcbiAgICAgICAgICAgICAgICB7IG06IHRydWUsIG46IFs0LCA1XSB9XG4gICAgICAgICAgICBdfTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZShvYmoxLCBvYmoyKSlcbiAgICAgICAgICAgICAgICAudG8uZGVlcC5lcXVhbCh7IGE6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBtOiB0cnVlLCBuOiBbMSwgMiwgNCwgNV0gfSxcbiAgICAgICAgICAgICAgICAgICAgeyBtOiB0cnVlLCBuOiBbMiwgM10gfVxuICAgICAgICAgICAgICAgIF0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCB0b3AgbGV2ZWwgYXJyYXlzXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZShbMSwgMiwgM10sIFszLCA0LCA1XSkpLnRvLmRlZXAuZXF1YWwoWzEsIDIsIDMsIDQsIDVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGEgdW5kZWZpbmVkIGxlZnQgc3ViIG9iamVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2Uoe30sIHsgYTogeyBtOiBcIjJcIiwgbjogXCIzXCIgfSB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IHsgbTogXCIyXCIsIG46IFwiM1wiIH0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhIHVuZGVmaW5lZCByaWdodCBzdWIgb2JqZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZSh7IGE6IHsgbTogXCIyXCIsIG46IFwiM1wiIH0gfSwge30pKS50by5kZWVwLmVxdWFsKHsgYTogeyBtOiBcIjJcIiwgbjogXCIzXCIgfSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGEgc3ViIG9iamVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoeyBhOiB7IG06IFwiMlwiLCBuOiBcIjNcIiB9IH0sIHsgYTogeyBuOiBcIjRcIiwgbzogXCI1XCIgfSB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IHsgbTogXCIyXCIsIG46IFwiNFwiLCBvOiBcIjVcIiB9IH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
