"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ObjectHelper.
 */
const Chai = require("chai");
const objectHelper_1 = require("../../../../dist/helpers/objectHelper");
describe("ObjectHelper", () => {
    it("can be created", () => {
        const obj = new objectHelper_1.ObjectHelper();
        Chai.should().exist(obj);
    });
    describe("getClassName", () => {
        it("can return no object if the object is undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(undefined)).to.equal("<no object>");
        });
        it("can return no object if the object is null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(null)).to.equal("<no object>");
        });
        it("can return String if the object is an empty string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("")).to.equal("String");
        });
        it("can return String if the object is a value string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("hello")).to.equal("String");
        });
        it("can return Number if the object is a number", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(10)).to.equal("Number");
        });
        it("can return Boolean if the object is a true boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(true)).to.equal("Boolean");
        });
        it("can return Boolean if the object is a false boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(false)).to.equal("Boolean");
        });
        it("can return Date if the object is a Date", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new Date())).to.equal("Date");
        });
        it("can return ObjectHelper if the object is a ObjectHelper", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new objectHelper_1.ObjectHelper())).to.equal("ObjectHelper");
        });
        it("can return no object if the object is an empty function", () => {
            const emptyFunction = () => "hello";
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(emptyFunction)).to.equal("<no object>");
        });
    });
    describe("addRemove", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(null, null, null, true)).to.equal(undefined);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(undefined, undefined, null, true)).to.equal(undefined);
        });
        it("can fail when called with an array and no key", () => {
            const arr = [1, 2, 3];
            objectHelper_1.ObjectHelper.addRemove(arr, undefined, undefined, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can add the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can not add the item if already exists", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can remove the item if existing", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
        it("can not remove the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("sort", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(undefined)).to.equal(undefined);
        });
        it("can succeed when called with an already sorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an unsorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ b: "2", a: "1" })).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("merge", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(null, null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, undefined)).to.equal(undefined);
        });
        it("can fail when called with undefined left", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, { a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can fail when called with undefined right", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, undefined)).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an overwrite property", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, { b: "3", c: "4" })).to.deep.equal({ a: "1", b: "3", c: "4" });
        });
        it("can succeed when called with a undefined left sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: ["2", "3"] })).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a undefined right sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["2", "3"] }, {})).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["1", "2"] }, { a: ["2", "3"] })).to.deep.equal({ a: ["1", "2", "3"] });
        });
        it("can succeed when called with a complex sub array", () => {
            const obj1 = { a: [
                    { m: true, n: [1, 2] },
                    { m: true, n: [2, 3] }
                ] };
            const obj2 = { a: [
                    { m: true, n: [4, 5] }
                ] };
            Chai.expect(objectHelper_1.ObjectHelper.merge(obj1, obj2))
                .to.deep.equal({ a: [
                    { m: true, n: [1, 2, 4, 5] },
                    { m: true, n: [2, 3] }
                ] });
        });
        it("can succeed when called with top level arrays", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge([1, 2, 3], [3, 4, 5])).to.deep.equal([1, 2, 3, 4, 5]);
        });
        it("can succeed when called with a undefined left sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: { m: "2", n: "3" } })).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a undefined right sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, {})).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, { a: { n: "4", o: "5" } })).to.deep.equal({ a: { m: "2", n: "4", o: "5" } });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvaGVscGVycy9vYmplY3RIZWxwZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsNkJBQTZCO0FBQzdCLHdFQUFxRTtBQUVyRSxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLDJCQUFZLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUNyQixFQUFFLENBQUMsaURBQWlELEVBQUU7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNENBQTRDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUU7WUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFL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WUFDcEMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtZQUN6QyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDdkMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNsQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDdkMsMkJBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFB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Q0FBQywyQ0FBMkMsRUFBRTtZQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckcsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RILENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlEQUF5RCxFQUFFO1lBQzFELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1RixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxF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QUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRTtZQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0ksQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImhlbHBlcnMvb2JqZWN0SGVscGVyLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlc3RzIGZvciBPYmplY3RIZWxwZXIuXG4gKi9cbmltcG9ydCAqIGFzIENoYWkgZnJvbSBcImNoYWlcIjtcbmltcG9ydCB7IE9iamVjdEhlbHBlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9kaXN0L2hlbHBlcnMvb2JqZWN0SGVscGVyXCI7XG5cbmRlc2NyaWJlKFwiT2JqZWN0SGVscGVyXCIsICgpID0+IHtcbiAgICBpdChcImNhbiBiZSBjcmVhdGVkXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gbmV3IE9iamVjdEhlbHBlcigpO1xuICAgICAgICBDaGFpLnNob3VsZCgpLmV4aXN0KG9iaik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImdldENsYXNzTmFtZVwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBubyBvYmplY3QgaWYgdGhlIG9iamVjdCBpcyB1bmRlZmluZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZSh1bmRlZmluZWQpKS50by5lcXVhbChcIjxubyBvYmplY3Q+XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gbm8gb2JqZWN0IGlmIHRoZSBvYmplY3QgaXMgbnVsbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKG51bGwpKS50by5lcXVhbChcIjxubyBvYmplY3Q+XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gU3RyaW5nIGlmIHRoZSBvYmplY3QgaXMgYW4gZW1wdHkgc3RyaW5nXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUoXCJcIikpLnRvLmVxdWFsKFwiU3RyaW5nXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gU3RyaW5nIGlmIHRoZSBvYmplY3QgaXMgYSB2YWx1ZSBzdHJpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShcImhlbGxvXCIpKS50by5lcXVhbChcIlN0cmluZ1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIE51bWJlciBpZiB0aGUgb2JqZWN0IGlzIGEgbnVtYmVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUoMTApKS50by5lcXVhbChcIk51bWJlclwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIEJvb2xlYW4gaWYgdGhlIG9iamVjdCBpcyBhIHRydWUgYm9vbGVhblwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuZ2V0Q2xhc3NOYW1lKHRydWUpKS50by5lcXVhbChcIkJvb2xlYW5cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBCb29sZWFuIGlmIHRoZSBvYmplY3QgaXMgYSBmYWxzZSBib29sZWFuXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUoZmFsc2UpKS50by5lcXVhbChcIkJvb2xlYW5cIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBEYXRlIGlmIHRoZSBvYmplY3QgaXMgYSBEYXRlXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUobmV3IERhdGUoKSkpLnRvLmVxdWFsKFwiRGF0ZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIE9iamVjdEhlbHBlciBpZiB0aGUgb2JqZWN0IGlzIGEgT2JqZWN0SGVscGVyXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5nZXRDbGFzc05hbWUobmV3IE9iamVjdEhlbHBlcigpKSkudG8uZXF1YWwoXCJPYmplY3RIZWxwZXJcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBubyBvYmplY3QgaWYgdGhlIG9iamVjdCBpcyBhbiBlbXB0eSBmdW5jdGlvblwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbXB0eUZ1bmN0aW9uID0gKCkgPT4gXCJoZWxsb1wiO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmdldENsYXNzTmFtZShlbXB0eUZ1bmN0aW9uKSkudG8uZXF1YWwoXCI8bm8gb2JqZWN0PlwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImFkZFJlbW92ZVwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCBudWxsXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5hZGRSZW1vdmUobnVsbCwgbnVsbCwgbnVsbCwgdHJ1ZSkpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCB1bmRlZmluZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLmFkZFJlbW92ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgbnVsbCwgdHJ1ZSkpLnRvLmVxdWFsKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcnJheSBhbmQgbm8ga2V5XCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IFsxLCAyLCAzXTtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUoYXJyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChhcnIpLnRvLmRlZXAuZXF1YWwoWzEsIDIsIDNdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gYWRkIHRoZSBpdGVtIGlmIG5vdCBleGlzdGluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnI6IGFueSA9IHsgYTogXCIxXCIsIGI6IFwiMlwiIH07XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGFyciwgXCJjXCIsIFwiM1wiLCB0cnVlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiwgYzogXCIzXCIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIG5vdCBhZGQgdGhlIGl0ZW0gaWYgYWxyZWFkeSBleGlzdHNcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0geyBhOiBcIjFcIiwgYjogXCIyXCIsIGM6IFwiM1wiIH07XG4gICAgICAgICAgICBPYmplY3RIZWxwZXIuYWRkUmVtb3ZlKGFyciwgXCJjXCIsIFwiM1wiLCB0cnVlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiwgYzogXCIzXCIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJlbW92ZSB0aGUgaXRlbSBpZiBleGlzdGluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSB7IGE6IFwiMVwiLCBiOiBcIjJcIiwgYzogXCIzXCIgfTtcbiAgICAgICAgICAgIE9iamVjdEhlbHBlci5hZGRSZW1vdmUoYXJyLCBcImNcIiwgXCIzXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gbm90IHJlbW92ZSB0aGUgaXRlbSBpZiBub3QgZXhpc3RpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyOiBhbnkgPSB7IGE6IFwiMVwiLCBiOiBcIjJcIiB9O1xuICAgICAgICAgICAgT2JqZWN0SGVscGVyLmFkZFJlbW92ZShhcnIsIFwiY1wiLCBcIjNcIiwgZmFsc2UpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiMlwiIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKFwic29ydFwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCBudWxsXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5zb3J0KG51bGwpKS50by5lcXVhbChudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuc29ydCh1bmRlZmluZWQpKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYW4gYWxyZWFkeSBzb3J0ZWQgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLnNvcnQoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSkpLnRvLmRlZXAuZXF1YWwoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhbiB1bnNvcnRlZCBhcnJheVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIuc29ydCh7IGI6IFwiMlwiLCBhOiBcIjFcIiB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFwiMVwiLCBiOiBcIjJcIiB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcIm1lcmdlXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIG51bGxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKG51bGwsIG51bGwpKS50by5lcXVhbChudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UodW5kZWZpbmVkLCB1bmRlZmluZWQpKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBmYWlsIHdoZW4gY2FsbGVkIHdpdGggdW5kZWZpbmVkIGxlZnRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHVuZGVmaW5lZCwgeyBhOiBcIjFcIiwgYjogXCIyXCIgfSkpLnRvLmRlZXAuZXF1YWwoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCB1bmRlZmluZWQgcmlnaHRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHsgYTogXCIxXCIsIGI6IFwiMlwiIH0sIHVuZGVmaW5lZCkpLnRvLmRlZXAuZXF1YWwoeyBhOiBcIjFcIiwgYjogXCIyXCIgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhbiBvdmVyd3JpdGUgcHJvcGVydHlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHsgYTogXCIxXCIsIGI6IFwiMlwiIH0sIHsgYjogXCIzXCIsIGM6IFwiNFwiIH0pKS50by5kZWVwLmVxdWFsKHsgYTogXCIxXCIsIGI6IFwiM1wiLCBjOiBcIjRcIiB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGEgdW5kZWZpbmVkIGxlZnQgc3ViIGFycmF5XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZSh7fSwgeyBhOiBbXCIyXCIsIFwiM1wiXSB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFtcIjJcIiwgXCIzXCJdIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYSB1bmRlZmluZWQgcmlnaHQgc3ViIGFycmF5XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KE9iamVjdEhlbHBlci5tZXJnZSh7IGE6IFtcIjJcIiwgXCIzXCJdIH0sIHt9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFtcIjJcIiwgXCIzXCJdIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYSBzdWIgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHsgYTogW1wiMVwiLCBcIjJcIl0gfSwgeyBhOiBbXCIyXCIsIFwiM1wiXSB9KSkudG8uZGVlcC5lcXVhbCh7IGE6IFtcIjFcIiwgXCIyXCIsIFwiM1wiXSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gc3VjY2VlZCB3aGVuIGNhbGxlZCB3aXRoIGEgY29tcGxleCBzdWIgYXJyYXlcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2JqMSA9IHsgYTogW1xuICAgICAgICAgICAgICAgIHsgbTogdHJ1ZSwgbjogWzEsIDJdIH0sXG4gICAgICAgICAgICAgICAgeyBtOiB0cnVlLCBuOiBbMiwgM10gfVxuICAgICAgICAgICAgXX07XG4gICAgICAgICAgICBjb25zdCBvYmoyID0geyBhOiBbXG4gICAgICAgICAgICAgICAgeyBtOiB0cnVlLCBuOiBbNCwgNV0gfVxuICAgICAgICAgICAgXX07XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2Uob2JqMSwgb2JqMikpXG4gICAgICAgICAgICAgICAgLnRvLmRlZXAuZXF1YWwoeyBhOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgbTogdHJ1ZSwgbjogWzEsIDIsIDQsIDVdIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgbTogdHJ1ZSwgbjogWzIsIDNdIH1cbiAgICAgICAgICAgICAgICBdIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggdG9wIGxldmVsIGFycmF5c1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoWzEsIDIsIDNdLCBbMywgNCwgNV0pKS50by5kZWVwLmVxdWFsKFsxLCAyLCAzLCA0LCA1XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhIHVuZGVmaW5lZCBsZWZ0IHN1YiBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHt9LCB7IGE6IHsgbTogXCIyXCIsIG46IFwiM1wiIH0gfSkpLnRvLmRlZXAuZXF1YWwoeyBhOiB7IG06IFwiMlwiLCBuOiBcIjNcIiB9IH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBzdWNjZWVkIHdoZW4gY2FsbGVkIHdpdGggYSB1bmRlZmluZWQgcmlnaHQgc3ViIG9iamVjdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChPYmplY3RIZWxwZXIubWVyZ2UoeyBhOiB7IG06IFwiMlwiLCBuOiBcIjNcIiB9IH0sIHt9KSkudG8uZGVlcC5lcXVhbCh7IGE6IHsgbTogXCIyXCIsIG46IFwiM1wiIH0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHN1Y2NlZWQgd2hlbiBjYWxsZWQgd2l0aCBhIHN1YiBvYmplY3RcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoT2JqZWN0SGVscGVyLm1lcmdlKHsgYTogeyBtOiBcIjJcIiwgbjogXCIzXCIgfSB9LCB7IGE6IHsgbjogXCI0XCIsIG86IFwiNVwiIH0gfSkpLnRvLmRlZXAuZXF1YWwoeyBhOiB7IG06IFwiMlwiLCBuOiBcIjRcIiwgbzogXCI1XCIgfSB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
