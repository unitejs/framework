"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ObjectHelper.
 */
const Chai = require("chai");
const objectHelper_1 = require("../../../../dist/helpers/objectHelper");
describe("ObjectHelper", () => {
    it("can be created", () => {
        const obj = new objectHelper_1.ObjectHelper();
        Chai.should().exist(obj);
    });
    describe("getClassName", () => {
        it("can return no object if the object is undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(undefined)).to.equal("<no object>");
        });
        it("can return no object if the object is null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(null)).to.equal("<no object>");
        });
        it("can return String if the object is an empty string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("")).to.equal("String");
        });
        it("can return String if the object is a value string", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName("hello")).to.equal("String");
        });
        it("can return Number if the object is a number", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(10)).to.equal("Number");
        });
        it("can return Boolean if the object is a true boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(true)).to.equal("Boolean");
        });
        it("can return Boolean if the object is a false boolean", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(false)).to.equal("Boolean");
        });
        it("can return Date if the object is a Date", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new Date())).to.equal("Date");
        });
        it("can return ObjectHelper if the object is a ObjectHelper", () => {
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(new objectHelper_1.ObjectHelper())).to.equal("ObjectHelper");
        });
        it("can return no object if the object is an empty function", () => {
            const emptyFunction = () => "hello";
            Chai.expect(objectHelper_1.ObjectHelper.getClassName(emptyFunction)).to.equal("<no object>");
        });
    });
    describe("addRemove", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(null, null, null, true)).to.equal(undefined);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.addRemove(undefined, undefined, null, true)).to.equal(undefined);
        });
        it("can fail when called with an array and no key", () => {
            const arr = [1, 2, 3];
            objectHelper_1.ObjectHelper.addRemove(arr, undefined, undefined, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can add the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can not add the item if already exists", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", true);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2", c: "3" });
        });
        it("can remove the item if existing", () => {
            const arr = { a: "1", b: "2", c: "3" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
        it("can not remove the item if not existing", () => {
            const arr = { a: "1", b: "2" };
            objectHelper_1.ObjectHelper.addRemove(arr, "c", "3", false);
            Chai.expect(arr).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("sort", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort(undefined)).to.equal(undefined);
        });
        it("can succeed when called with an already sorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an unsorted array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.sort({ b: "2", a: "1" })).to.deep.equal({ a: "1", b: "2" });
        });
    });
    describe("merge", () => {
        it("can fail when called with null", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(null, null)).to.equal(null);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, undefined)).to.equal(undefined);
        });
        it("can fail when called with undefined left", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge(undefined, { a: "1", b: "2" })).to.deep.equal({ a: "1", b: "2" });
        });
        it("can fail when called with undefined right", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, undefined)).to.deep.equal({ a: "1", b: "2" });
        });
        it("can succeed when called with an overwrite property", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: "1", b: "2" }, { b: "3", c: "4" })).to.deep.equal({ a: "1", b: "3", c: "4" });
        });
        it("can succeed when called with a undefined left sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: ["2", "3"] })).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a undefined right sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["2", "3"] }, {})).to.deep.equal({ a: ["2", "3"] });
        });
        it("can succeed when called with a sub array", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: ["1", "2"] }, { a: ["2", "3"] })).to.deep.equal({ a: ["1", "2", "3"] });
        });
        it("can succeed when called with a undefined left sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({}, { a: { m: "2", n: "3" } })).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a undefined right sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, {})).to.deep.equal({ a: { m: "2", n: "3" } });
        });
        it("can succeed when called with a sub object", () => {
            Chai.expect(objectHelper_1.ObjectHelper.merge({ a: { m: "2", n: "3" } }, { a: { n: "4", o: "5" } })).to.deep.equal({ a: { m: "2", n: "4", o: "5" } });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
