"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ArrayHelper.
 */
const Chai = require("chai");
const arrayHelper_1 = require("../../../../dist/helpers/arrayHelper");
describe("ArrayHelper", () => {
    it("can be created", () => {
        const obj = new arrayHelper_1.ArrayHelper();
        Chai.should().exist(obj);
    });
    describe("addRemove", () => {
        it("can fail when called with null", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.addRemove(null, null, true)).to.equal(undefined);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.addRemove(undefined, undefined, true)).to.equal(undefined);
        });
        it("can fail when called with an array and no key", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, undefined, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can add the item if not existing", () => {
            const arr = [1, 2];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can not add the item if already exists", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can remove the item if existing", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, false);
            Chai.expect(arr).to.deep.equal([1, 2]);
        });
        it("can not remove the item if not existing", () => {
            const arr = [1, 2];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, false);
            Chai.expect(arr).to.deep.equal([1, 2]);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvaGVscGVycy9hcnJheUhlbHBlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0dBRUc7QUFDSCw2QkFBNkI7QUFDN0Isc0VBQW1FO0FBRW5FLFFBQVEsQ0FBQyxhQUFhLEVBQUU7SUFDcEIsRUFBRSxDQUFDLGdCQUFnQixFQUFFO1FBQ2pCLE1BQU0sR0FBRyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFO1FBQ2xCLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLHlCQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMseUJBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUU7WUFDaEQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLHlCQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtZQUNuQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuQix5QkFBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLHlCQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRTtZQUNsQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEIseUJBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFDMUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbkIseUJBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImhlbHBlcnMvYXJyYXlIZWxwZXIuc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdHMgZm9yIEFycmF5SGVscGVyLlxuICovXG5pbXBvcnQgKiBhcyBDaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBBcnJheUhlbHBlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9kaXN0L2hlbHBlcnMvYXJyYXlIZWxwZXJcIjtcblxuZGVzY3JpYmUoXCJBcnJheUhlbHBlclwiLCAoKSA9PiB7XG4gICAgaXQoXCJjYW4gYmUgY3JlYXRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG5ldyBBcnJheUhlbHBlcigpO1xuICAgICAgICBDaGFpLnNob3VsZCgpLmV4aXN0KG9iaik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImFkZFJlbW92ZVwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIGZhaWwgd2hlbiBjYWxsZWQgd2l0aCBudWxsXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KEFycmF5SGVscGVyLmFkZFJlbW92ZShudWxsLCBudWxsLCB0cnVlKSkudG8uZXF1YWwodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gZmFpbCB3aGVuIGNhbGxlZCB3aXRoIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChBcnJheUhlbHBlci5hZGRSZW1vdmUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUpKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiBmYWlsIHdoZW4gY2FsbGVkIHdpdGggYW4gYXJyYXkgYW5kIG5vIGtleVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSBbMSwgMiwgM107XG4gICAgICAgICAgICBBcnJheUhlbHBlci5hZGRSZW1vdmUoYXJyLCB1bmRlZmluZWQsIHRydWUpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKFsxLCAyLCAzXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIGFkZCB0aGUgaXRlbSBpZiBub3QgZXhpc3RpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gWzEsIDJdO1xuICAgICAgICAgICAgQXJyYXlIZWxwZXIuYWRkUmVtb3ZlKGFyciwgMywgdHJ1ZSk7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChhcnIpLnRvLmRlZXAuZXF1YWwoWzEsIDIsIDNdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gbm90IGFkZCB0aGUgaXRlbSBpZiBhbHJlYWR5IGV4aXN0c1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSBbMSwgMiwgM107XG4gICAgICAgICAgICBBcnJheUhlbHBlci5hZGRSZW1vdmUoYXJyLCAzLCB0cnVlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbChbMSwgMiwgM10pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZW1vdmUgdGhlIGl0ZW0gaWYgZXhpc3RpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gWzEsIDIsIDNdO1xuICAgICAgICAgICAgQXJyYXlIZWxwZXIuYWRkUmVtb3ZlKGFyciwgMywgZmFsc2UpO1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoYXJyKS50by5kZWVwLmVxdWFsKFsxLCAyXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIG5vdCByZW1vdmUgdGhlIGl0ZW0gaWYgbm90IGV4aXN0aW5nXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IFsxLCAyXTtcbiAgICAgICAgICAgIEFycmF5SGVscGVyLmFkZFJlbW92ZShhcnIsIDMsIGZhbHNlKTtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KGFycikudG8uZGVlcC5lcXVhbChbMSwgMl0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
