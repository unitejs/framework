"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ArrayHelper.
 */
const Chai = require("chai");
const arrayHelper_1 = require("../../../../dist/helpers/arrayHelper");
describe("ArrayHelper", () => {
    it("can be created", () => {
        const obj = new arrayHelper_1.ArrayHelper();
        Chai.should().exist(obj);
    });
    describe("addRemove", () => {
        it("can fail when called with null", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.addRemove(null, null, true)).to.equal(undefined);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.addRemove(undefined, undefined, true)).to.equal(undefined);
        });
        it("can fail when called with an array and no key", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, undefined, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can add the item if not existing", () => {
            const arr = [1, 2];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can not add the item if already exists", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, true);
            Chai.expect(arr).to.deep.equal([1, 2, 3]);
        });
        it("can remove the item if existing", () => {
            const arr = [1, 2, 3];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, false);
            Chai.expect(arr).to.deep.equal([1, 2]);
        });
        it("can not remove the item if not existing", () => {
            const arr = [1, 2];
            arrayHelper_1.ArrayHelper.addRemove(arr, 3, false);
            Chai.expect(arr).to.deep.equal([1, 2]);
        });
    });
    describe("merge", () => {
        it("can do nothing when called with null", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge(null, null)).to.equal(null);
        });
        it("can do nothing when called with undefined", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge(undefined, undefined)).to.equal(undefined);
        });
        it("can return second array when called with undefined first array", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge(undefined, [1, 2, 3])).to.deep.equal([1, 2, 3]);
        });
        it("can return first array when called with undefined second array", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge([1, 2, 3], undefined)).to.deep.equal([1, 2, 3]);
        });
        it("can return combined when called with two arrays", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge([1, 2, 3], [4, 5, 6])).to.deep.equal([1, 2, 3, 4, 5, 6]);
        });
        it("can return combined when called with two arrays and duplicates", () => {
            Chai.expect(arrayHelper_1.ArrayHelper.merge([1, 2, 3], [2, 3, 4])).to.deep.equal([1, 2, 3, 4]);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
