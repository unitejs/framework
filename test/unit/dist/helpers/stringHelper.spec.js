"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for StringHelper.
 */
const Chai = require("chai");
const stringHelper_1 = require("../../../../dist/helpers/stringHelper");
describe("StringHelper", () => {
    it("can be created", () => {
        const obj = new stringHelper_1.StringHelper();
        Chai.should().exist(obj);
    });
    describe("isString", () => {
        it("can return false if passed undefined", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(undefined)).to.equal(false);
        });
        it("can return false if passed null", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(null)).to.equal(false);
        });
        it("can return false if passed number", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(10)).to.equal(false);
        });
        it("can return false if passed true boolean", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(true)).to.equal(false);
        });
        it("can return false if passed false boolean", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(false)).to.equal(false);
        });
        it("can return false if passed Date", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(new Date())).to.equal(false);
        });
        it("can return false if passed object", () => {
            Chai.expect(stringHelper_1.StringHelper.isString(new stringHelper_1.StringHelper())).to.equal(false);
        });
        it("can return true if passed empty string", () => {
            Chai.expect(stringHelper_1.StringHelper.isString("")).to.equal(true);
        });
        it("can return true if passed value string", () => {
            Chai.expect(stringHelper_1.StringHelper.isString("hello")).to.equal(true);
        });
    });
    describe("toCamelCase", () => {
        it("can return undefined if passed undefined", () => {
            Chai.expect(stringHelper_1.StringHelper.toCamelCase(undefined)).to.equal(undefined);
        });
        it("can return null if passed null", () => {
            Chai.expect(stringHelper_1.StringHelper.toCamelCase(null)).to.equal(null);
        });
        it("can return camel cased string if passed single all lower", () => {
            Chai.expect(stringHelper_1.StringHelper.toCamelCase("hello")).to.equal("hello");
        });
        it("can return camel cased string if passed multi mixed case", () => {
            Chai.expect(stringHelper_1.StringHelper.toCamelCase("HelloYou")).to.equal("helloYou");
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvaGVscGVycy9zdHJpbmdIZWxwZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsNkJBQTZCO0FBQzdCLHVFQUFvRTtBQUVwRSxRQUFRLENBQUMsY0FBYyxFQUFFO0lBQ3JCLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRTtRQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLDJCQUFZLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRTtRQUNqQixFQUFFLENBQUMsc0NBQXNDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMseUNBQXlDLEVBQUU7WUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSwyQkFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUU7WUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxhQUFhLEVBQUU7UUFDcEIsRUFBRSxDQUFDLDBDQUEwQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdDQUFnQyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBEQUEwRCxFQUFFO1lBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBEQUEwRCxFQUFFO1lBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJoZWxwZXJzL3N0cmluZ0hlbHBlci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBmb3IgU3RyaW5nSGVscGVyLlxuICovXG5pbXBvcnQgKiBhcyBDaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBTdHJpbmdIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3JjL2hlbHBlcnMvc3RyaW5nSGVscGVyXCI7XG5cbmRlc2NyaWJlKFwiU3RyaW5nSGVscGVyXCIsICgpID0+IHtcbiAgICBpdChcImNhbiBiZSBjcmVhdGVkXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gbmV3IFN0cmluZ0hlbHBlcigpO1xuICAgICAgICBDaGFpLnNob3VsZCgpLmV4aXN0KG9iaik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImlzU3RyaW5nXCIsICgpID0+IHtcbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIGZhbHNlIGlmIHBhc3NlZCB1bmRlZmluZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoU3RyaW5nSGVscGVyLmlzU3RyaW5nKHVuZGVmaW5lZCkpLnRvLmVxdWFsKGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIGZhbHNlIGlmIHBhc3NlZCBudWxsXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KFN0cmluZ0hlbHBlci5pc1N0cmluZyhudWxsKSkudG8uZXF1YWwoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gZmFsc2UgaWYgcGFzc2VkIG51bWJlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChTdHJpbmdIZWxwZXIuaXNTdHJpbmcoMTApKS50by5lcXVhbChmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBmYWxzZSBpZiBwYXNzZWQgdHJ1ZSBib29sZWFuXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KFN0cmluZ0hlbHBlci5pc1N0cmluZyh0cnVlKSkudG8uZXF1YWwoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gZmFsc2UgaWYgcGFzc2VkIGZhbHNlIGJvb2xlYW5cIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoU3RyaW5nSGVscGVyLmlzU3RyaW5nKGZhbHNlKSkudG8uZXF1YWwoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gZmFsc2UgaWYgcGFzc2VkIERhdGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoU3RyaW5nSGVscGVyLmlzU3RyaW5nKG5ldyBEYXRlKCkpKS50by5lcXVhbChmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiBmYWxzZSBpZiBwYXNzZWQgb2JqZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KFN0cmluZ0hlbHBlci5pc1N0cmluZyhuZXcgU3RyaW5nSGVscGVyKCkpKS50by5lcXVhbChmYWxzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiB0cnVlIGlmIHBhc3NlZCBlbXB0eSBzdHJpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoU3RyaW5nSGVscGVyLmlzU3RyaW5nKFwiXCIpKS50by5lcXVhbCh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIHRydWUgaWYgcGFzc2VkIHZhbHVlIHN0cmluZ1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChTdHJpbmdIZWxwZXIuaXNTdHJpbmcoXCJoZWxsb1wiKSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoXCJ0b0NhbWVsQ2FzZVwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIHJldHVybiB1bmRlZmluZWQgaWYgcGFzc2VkIHVuZGVmaW5lZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChTdHJpbmdIZWxwZXIudG9DYW1lbENhc2UodW5kZWZpbmVkKSkudG8uZXF1YWwodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIG51bGwgaWYgcGFzc2VkIG51bGxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoU3RyaW5nSGVscGVyLnRvQ2FtZWxDYXNlKG51bGwpKS50by5lcXVhbChudWxsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIGNhbWVsIGNhc2VkIHN0cmluZyBpZiBwYXNzZWQgc2luZ2xlIGFsbCBsb3dlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChTdHJpbmdIZWxwZXIudG9DYW1lbENhc2UoXCJoZWxsb1wiKSkudG8uZXF1YWwoXCJoZWxsb1wiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIGNhbWVsIGNhc2VkIHN0cmluZyBpZiBwYXNzZWQgbXVsdGkgbWl4ZWQgY2FzZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChTdHJpbmdIZWxwZXIudG9DYW1lbENhc2UoXCJIZWxsb1lvdVwiKSkudG8uZXF1YWwoXCJoZWxsb1lvdVwiKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdfQ==
