"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ParameterValidation.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const parameterValidation_1 = require("../../../../dist/helpers/parameterValidation");
describe("ParameterValidation", () => {
    let sandbox;
    let loggerStub;
    let spiedErrorMethod;
    let spiedInfoMethod;
    beforeEach(() => {
        sandbox = Sinon.createSandbox();
        loggerStub = {};
        loggerStub.error = () => { };
        loggerStub.info = () => { };
        spiedErrorMethod = sandbox.spy(loggerStub, "error");
        spiedInfoMethod = sandbox.spy(loggerStub, "info");
    });
    afterEach(() => {
        sandbox.restore();
    });
    it("can be created", () => {
        const obj = new parameterValidation_1.ParameterValidation();
        Chai.should().exist(obj);
    });
    describe("checkPackageName", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", null)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", undefined)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with string > 214", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "a".repeat(215))).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed when called with string === 214", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "a".repeat(214))).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
        it("can fail with upper case character", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "packageName")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed with only lower case characters", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "packagename", "a")).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
        it("can fail if starts with .", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", ".packagename")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if starts with -", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "-packagename")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if starts with _", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "_packagename")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains \\", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package\\name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains /", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package/name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains (", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package(name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains )", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package)name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains &", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package&name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains ?", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package?name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains #", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package#name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains |", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package|name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains <", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package<name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains >", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package>name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains @", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package@name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains :", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package:name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains %", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package%name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains whitespace", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains *", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package*name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains '", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package'name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains \"", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package\"name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains !", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package!name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains ~", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package~name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if contains `", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package`name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters ,", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package,name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters +", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package+name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters ;", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package;name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters $", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package$name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters =", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package=name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters [", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package[name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters ]", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package]name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail if non url safe characters ^", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPackageName(loggerStub, "param", "package^name")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
    });
    describe("checkPattern", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", null, /a/, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", undefined, /a/, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", "", /a/, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with null pattern", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", "a", null, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined pattern", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", "a", undefined, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with no pattern match", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", "b", /a/, "message")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed when called with pattern match", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkPattern(loggerStub, "param", "a", /a/, "message")).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
    });
    describe("checkOneOf", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", null, [])).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", undefined, [])).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "", [])).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty null values", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "a", null)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty undefined values", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "a", undefined)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with value not in values", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "b", ["a"])).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with value not in values custom error", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "b", ["a"], "err")).to.equal(false);
            Chai.expect(spiedErrorMethod.calledWith("param", "err")).to.equal(true);
        });
        it("can succeed when called with value in values", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.checkOneOf(loggerStub, "param", "a", ["a"])).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
    });
    describe("notEmpty", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", null)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", undefined)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", "")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string array", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", [])).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed when called with string value", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", "a")).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
        it("can succeed when called with string array value", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmpty(loggerStub, "param", ["a"])).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
    });
    describe("notEmptyNumber", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmptyNumber(loggerStub, "param", null)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmptyNumber(loggerStub, "param", undefined)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with 0", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmptyNumber(loggerStub, "param", 0)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed when called with > 0", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.notEmptyNumber(loggerStub, "param", 1)).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
    });
    describe("isColor", () => {
        it("can fail when called with null", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.isColor(loggerStub, "param", null)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with undefined", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.isColor(loggerStub, "param", undefined)).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with empty string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.isColor(loggerStub, "param", "")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can fail when called with non color string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.isColor(loggerStub, "param", "a")).to.equal(false);
            Chai.expect(spiedErrorMethod.called).to.equal(true);
        });
        it("can succeed when called with color string", () => {
            Chai.expect(parameterValidation_1.ParameterValidation.isColor(loggerStub, "param", "#123")).to.equal(true);
            Chai.expect(spiedInfoMethod.called).to.equal(true);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
