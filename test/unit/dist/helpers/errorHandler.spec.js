"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for ErrorHandler.
 */
const Chai = require("chai");
const errorHandler_1 = require("../../../../dist/helpers/errorHandler");
describe("ErrorHandler", () => {
    it("can be created", () => {
        const obj = new errorHandler_1.ErrorHandler();
        Chai.should().exist(obj);
    });
    describe("format", () => {
        it("can return unknown error when called with null", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format(null)).to.equal("unknown error");
        });
        it("can return unknown error when called with undefined", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format(undefined)).to.equal("unknown error");
        });
        it("can return the message when called with an Error", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format(new Error("the message"))).to.equal("the message");
        });
        it("can return the text when called with a string", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format("the message")).to.equal("the message");
        });
        it("can return the JSON when called with a number", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format(10)).to.equal(JSON.stringify(10));
        });
        it("can return the JSON when called with a boolean", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format(true)).to.equal(JSON.stringify(true));
        });
        it("can return the JSON when called with an object", () => {
            Chai.expect(errorHandler_1.ErrorHandler.format({ p1: true, p2: 10 })).to.equal(JSON.stringify({ p1: true, p2: 10 }, undefined, "\t"));
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvdW5pdC9zcmMvaGVscGVycy9lcnJvckhhbmRsZXIuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOztHQUVHO0FBQ0gsNkJBQTZCO0FBQzdCLHVFQUFvRTtBQUVwRSxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLElBQUksMkJBQVksRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUNwQixFQUFFLENBQUMsZ0RBQWdELEVBQUUsR0FBRyxFQUFFO1lBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMxRSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxHQUFHLEVBQUU7WUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN2RixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1lBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsMkJBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFHLEVBQUU7WUFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtZQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3pILENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJoZWxwZXJzL2Vycm9ySGFuZGxlci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0cyBmb3IgRXJyb3JIYW5kbGVyLlxuICovXG5pbXBvcnQgKiBhcyBDaGFpIGZyb20gXCJjaGFpXCI7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3JjL2hlbHBlcnMvZXJyb3JIYW5kbGVyXCI7XG5cbmRlc2NyaWJlKFwiRXJyb3JIYW5kbGVyXCIsICgpID0+IHtcbiAgICBpdChcImNhbiBiZSBjcmVhdGVkXCIsICgpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gbmV3IEVycm9ySGFuZGxlcigpO1xuICAgICAgICBDaGFpLnNob3VsZCgpLmV4aXN0KG9iaik7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImZvcm1hdFwiLCAoKSA9PiB7XG4gICAgICAgIGl0KFwiY2FuIHJldHVybiB1bmtub3duIGVycm9yIHdoZW4gY2FsbGVkIHdpdGggbnVsbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChFcnJvckhhbmRsZXIuZm9ybWF0KG51bGwpKS50by5lcXVhbChcInVua25vd24gZXJyb3JcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KFwiY2FuIHJldHVybiB1bmtub3duIGVycm9yIHdoZW4gY2FsbGVkIHdpdGggdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KEVycm9ySGFuZGxlci5mb3JtYXQodW5kZWZpbmVkKSkudG8uZXF1YWwoXCJ1bmtub3duIGVycm9yXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gdGhlIG1lc3NhZ2Ugd2hlbiBjYWxsZWQgd2l0aCBhbiBFcnJvclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChFcnJvckhhbmRsZXIuZm9ybWF0KG5ldyBFcnJvcihcInRoZSBtZXNzYWdlXCIpKSkudG8uZXF1YWwoXCJ0aGUgbWVzc2FnZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIHRoZSB0ZXh0IHdoZW4gY2FsbGVkIHdpdGggYSBzdHJpbmdcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQ2hhaS5leHBlY3QoRXJyb3JIYW5kbGVyLmZvcm1hdChcInRoZSBtZXNzYWdlXCIpKS50by5lcXVhbChcInRoZSBtZXNzYWdlXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdChcImNhbiByZXR1cm4gdGhlIEpTT04gd2hlbiBjYWxsZWQgd2l0aCBhIG51bWJlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBDaGFpLmV4cGVjdChFcnJvckhhbmRsZXIuZm9ybWF0KDEwKSkudG8uZXF1YWwoSlNPTi5zdHJpbmdpZnkoMTApKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIHRoZSBKU09OIHdoZW4gY2FsbGVkIHdpdGggYSBib29sZWFuXCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KEVycm9ySGFuZGxlci5mb3JtYXQodHJ1ZSkpLnRvLmVxdWFsKEpTT04uc3RyaW5naWZ5KHRydWUpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoXCJjYW4gcmV0dXJuIHRoZSBKU09OIHdoZW4gY2FsbGVkIHdpdGggYW4gb2JqZWN0XCIsICgpID0+IHtcbiAgICAgICAgICAgIENoYWkuZXhwZWN0KEVycm9ySGFuZGxlci5mb3JtYXQoeyBwMTogdHJ1ZSwgcDI6IDEwfSkpLnRvLmVxdWFsKEpTT04uc3RyaW5naWZ5KHsgcDE6IHRydWUsIHAyOiAxMH0sIHVuZGVmaW5lZCwgXCJcXHRcIikpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl19
